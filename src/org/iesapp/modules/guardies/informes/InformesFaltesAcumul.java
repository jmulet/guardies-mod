/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InformesFaltesAcumul.java
 *
 * Created on 08-may-2011, 18:52:13
 */

package org.iesapp.modules.guardies.informes;

import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.FileDialog;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.AbstractListModel;
import javax.swing.Action;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JRootPane;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.ListCellRenderer;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import jxl.CellView;
import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import org.iesapp.modules.guardies.GuardiesModule;
import org.iesapp.modules.guardies.util.Cfg;
import org.iesapp.util.StringUtils;


/**
 *
 * @author Josep
 */
public class InformesFaltesAcumul extends javax.swing.JFrame {


   // private JList rowHeader;
    private final AbstractListModel lm;
    private boolean isListening;
    private final DadesFaltesAcumulades dadesAcumulades;
    private final Cfg cfg;

    /** Creates new form InformesFaltesAcumul */
    public InformesFaltesAcumul(java.awt.Frame par, boolean modal, Cfg cfg) {
        this.cfg = cfg;
        final String profes[] = new String[GuardiesModule.abrev2prof.size()];
        abrevs = new String[GuardiesModule.abrev2prof.size()];
        int j = 0;
        for(String ky: GuardiesModule.abrev2prof.keySet())
        {
            profes[j] = GuardiesModule.abrev2prof.get(ky);
            abrevs[j] = ky;
            j +=1;
        }

          lm = new AbstractListModel() {
          String headers[] = profes;
         
          public int getSize() {
            return headers.length;
          }

          public Object getElementAt(int index) {
            return headers[index];
          }

        };

        
        dadesAcumulades = new DadesFaltesAcumulades(cfg);

        initComponents();
        
         jTable1.setIntercellSpacing( new java.awt.Dimension(2,2) );
         jTable1.setGridColor(java.awt.Color.gray);
         jTable1.setShowGrid(true);

        for(int i=0; i<31; i++) {
            jTable1.getColumnModel().getColumn(i).setCellRenderer(new HighlightRenderer(cfg));
        }

        isListening = true;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMonthChooser1 = new com.toedter.calendar.JMonthChooser();
        jYearChooser1 = new com.toedter.calendar.JYearChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;   //Disallow the editing of any cell
            }};
            jButton1 = new javax.swing.JButton();
            jButton2 = new javax.swing.JButton();
            jButton3 = new javax.swing.JButton();
            jButton4 = new javax.swing.JButton();

            setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
            setTitle("Informe mensual de faltes acumulades");
            setBackground(java.awt.Color.white);
            addWindowListener(new java.awt.event.WindowAdapter() {
                public void windowClosing(java.awt.event.WindowEvent evt) {
                    formWindowClosing(evt);
                }
            });

            jMonthChooser1.setLocale(new java.util.Locale("ca"));
            jMonthChooser1.setDayChooser(null);
            jMonthChooser1.setYearChooser(null);
            jMonthChooser1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                public void propertyChange(java.beans.PropertyChangeEvent evt) {
                    jMonthChooser1PropertyChange(evt);
                }
            });

            jYearChooser1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                public void propertyChange(java.beans.PropertyChangeEvent evt) {
                    jYearChooser1PropertyChange(evt);
                }
            });

            jLabel1.setText("Mes");

            jLabel2.setText("Any");

            jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

            jTable1.setGridColor(Color.gray);
            jTable1.setShowGrid(true);
            jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
                },
                new String [] {
                    "Professor / dia", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31"
                }
            ) {
                boolean[] canEdit = new boolean [] {
                    false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            modelTable1 = new javax.swing.table.DefaultTableModel(
                new Object [][] {
                },
                new String [] {
                    "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31"
                }
            );

            jTable1.setModel(modelTable1);
            jTable1.getTableHeader().setReorderingAllowed(false);
            jTable1.setRowHeight(32);
            jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jTable1MouseClicked(evt);
                }
            });
            jTable1.addFocusListener(new java.awt.event.FocusAdapter() {
                public void focusGained(java.awt.event.FocusEvent evt) {
                    jTable1FocusGained(evt);
                }
            });
            jScrollPane1.setViewportView(jTable1);
            for(int j=0; j<31; j++)
            jTable1.getColumnModel().getColumn(j).setPreferredWidth(50);
            JList rowHeader = new JList(lm);
            rowHeader.setFixedCellWidth(200);

            rowHeader.setFixedCellHeight(jTable1.getRowHeight()
                + jTable1.getRowMargin());
            //                           + table.getIntercellSpacing().height);
        rowHeader.setCellRenderer(new RowHeaderRenderer(jTable1));

        jScrollPane1.setRowHeaderView(rowHeader);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/iesapp/modules/guardies/icons/exit.gif"))); // NOI18N
        jButton1.setText("Tanca");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/iesapp/modules/guardies/icons/genera.gif"))); // NOI18N
        jButton2.setText("Genera");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/iesapp/modules/guardies/icons/save.gif"))); // NOI18N
        jButton3.setText("Desa .xls");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/iesapp/modules/guardies/icons/view.gif"))); // NOI18N
        jButton4.setText(" Informe");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 795, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(13, 13, 13)
                        .addComponent(jMonthChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jYearChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jButton2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 483, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jMonthChooser1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(jYearChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        ClearTable();
        FillTable();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        isListening = false;
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    //Desa com a document EXCEL
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
             FileDialog fd = new FileDialog(this,
                                  "Desa taula com document Excel...",
                                   FileDialog.SAVE);
                       fd.setLocationRelativeTo(null);
	               fd.setVisible(true);
	  String file = fd.getFile();
	  String dir = fd.getDirectory();
          if(file == null || dir == null) {
            return;
        }
          if( !StringUtils.AfterLast(file, ".").trim().equals("xls") ) {
            file +=".xls";
        }

        try {
           WritableWorkbook workbook = Workbook.createWorkbook(new File(dir+file));
          WritableSheet sheet = null;

           int ncol = 0;

           String mes = ""+jMonthChooser1.getMonth();
           String any = ""+jYearChooser1.getYear();

           sheet =  workbook.createSheet("F_ACUMUL", 0);
          //headers
           sheet.addCell(  new Label(0, 0, "Professor/a")  );
           for(int i=1; i<32; i++) {
                sheet.addCell(  new Label(i, 0, i+"-"+mes+"-"+any)  );
            }

           int i = 1;
           for(String ky: GuardiesModule.abrev2prof.keySet())
           {

               sheet.addCell(new Label(0, i,  GuardiesModule.abrev2prof.get(ky) ) );
               for(int j=1; j<32; j++){
                    sheet.addCell(new Label(j, i, (String) jTable1.getValueAt(i-1, j-1)) );
               }

               i +=1;
           }

           for(int x=0;x<32;x++)
           {
            CellView cell=sheet.getColumnView(x);
            cell.setAutosize(true);
            sheet.setColumnView(x, cell);
           }

           workbook.write();
           workbook.close();

        } catch (IOException ex) {
             Logger.getLogger(InformesFaltes.class.getName()).log(Level.SEVERE, null, ex);
        }
         catch (WriteException ex) {
             Logger.getLogger(InformesFaltes.class.getName()).log(Level.SEVERE, null, ex); }


        try {
          Desktop.getDesktop().open(new File(dir+file));
        } catch (IOException ex) {
           // MyLogger.log("No es pot obrir "+ cfg.doc , MyLogger.logWARNING);

        }

    }//GEN-LAST:event_jButton3ActionPerformed

    //Clic onto table means a InformesFaltes dialog is called
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
       if(evt.getClickCount()==2 & evt.getButton()==MouseEvent.BUTTON1)  //only respond to left double-click
       {
           int mcol = jTable1.getSelectedColumn();
           int dia = mcol + 1;
           int mrow = jTable1.getSelectedRow();

           String txt = (String) jTable1.getValueAt(mrow, mcol);
           if(txt.trim().equals("Ok")) {
                return;
            }

           int mes = jMonthChooser1.getMonth();
           int year = jYearChooser1.getYear();
           String abrev = abrevs[mrow];

           int torn = GuardiesModule.torn2prof.get(abrev).intValue();

           Calendar cal = Calendar.getInstance();
           cal.set(year, mes, dia);
           java.util.Date udate = cal.getTime();

           InformesFaltes dlg = new InformesFaltes(javar.JRDialog.getActiveFrame(), true, abrev, udate, torn,cfg);
           dlg.setLocationRelativeTo(null);
           dlg.setVisible(true);
       }
    }//GEN-LAST:event_jTable1MouseClicked

    //Fill table
    private void jTable1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable1FocusGained
      
        ClearTable();
        FillTable();
    }//GEN-LAST:event_jTable1FocusGained

    private void jYearChooser1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jYearChooser1PropertyChange
        if(!isListening) {
            return;
        }
        ClearTable();
        FillTable();
    }//GEN-LAST:event_jYearChooser1PropertyChange

    private void jMonthChooser1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jMonthChooser1PropertyChange
        if(!isListening) {
            return;
        }
        ClearTable();
        FillTable();
    }//GEN-LAST:event_jMonthChooser1PropertyChange

    //Crea el report amb jasper
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        
        if(jTable1.getRowCount()==0) {
            return;
        }
        
        ReportingClass rc = new ReportingClass();
        HashMap map = new HashMap();
        
        String mes = "";
        switch(jMonthChooser1.getMonth())
        {
            case 0: mes = "Gener"; break;
            case 1: mes = "Febrer"; break;
            case 2: mes = "Març"; break;
            case 3: mes = "Abril"; break;
            case 4: mes = "Maig"; break; 
            case 5: mes = "Juny"; break;
            case 6: mes = "Juliol"; break;
            case 7: mes = "Agost"; break;
            case 8: mes = "Setembre"; break;
            case 9: mes = "Octubre"; break;  
            case 10: mes = "Novembre"; break;
            case 11: mes = "Desembre"; break; 
        }
        
        map.put("periode", mes+" de "+jYearChooser1.getYear());
        
        ArrayList<Integer> dies = dadesAcumulades.getDiesAmbSignatures(jMonthChooser1.getMonth(), jYearChooser1.getYear());
        
        int iddia = 1;
        for(int i=0; i<dies.size(); i++)
        {
            map.put("d"+iddia, "dia "+dies.get(i));
            iddia +=1;
        }
        
        
        ArrayList listbean = new ArrayList<BeanMensualFaltes>();
        
        int row = 0;
        for(String abrev: GuardiesModule.abrev2prof.keySet())
        {
           BeanMensualFaltes bean = new BeanMensualFaltes();
           bean.setProfessor(GuardiesModule.abrev2prof.get(abrev));
            for(int i=0; i<dies.size(); i++)
            {
                String txt = (String) jTable1.getValueAt(row, dies.get(i)-1);
                //passam 
                String cellColor="";
                      if(txt.trim().equals("F"))
                      {
                            cellColor = org.iesapp.framework.util.ColorUtils.getString(Cfg.colorFalta);
                            txt = "<b style=\"background-color: "+cellColor+"; color: Black;\">"+txt+"</b>";
                      }
                      else if(txt.contains("-J"))
                      {
                            cellColor = org.iesapp.framework.util.ColorUtils.getString(Cfg.colorFaltaJustificada);
                            txt = "<b style=\"background-color: "+cellColor+"; color: Black;\">"+txt+"</b>";
                      }
                      else if(txt.trim().equals("Ok"))
                      {
                           cellColor = org.iesapp.framework.util.ColorUtils.getString(Cfg.colorOk);
                           txt = "<b style=\"background-color: "+cellColor+"; color: Black;\">"+txt+"</b>";
                      }
                      else if(txt.trim().contains("?") && txt.contains("Ok"))
                      {
                          cellColor = org.iesapp.framework.util.ColorUtils.getString(Cfg.colorFaltenXSignar);
                          txt = "<b style=\"background-color: "+cellColor+"; color: Black;\">"+txt+"</b>";
                          //tip = "Arriba d'hora però té Guardies sense signar.";
                      }
                      else if(txt.trim().contains("?") && txt.contains("Ok-J"))
                      {
                          cellColor = org.iesapp.framework.util.ColorUtils.getString(Cfg.colorFaltaJustificada);
                          txt = "<b style=\"background-color: "+cellColor+"; color: Black;\">"+txt+"</b>";
                          //tip = "Arriba d'hora però té Guardies sense signar.";
                      }
                      else if(txt.trim().equals("-") || txt.length() == 0)
                      {
                          txt = "<b style=\"background-color: rgb(245,245,245); color: Black;\">"+txt+"</b>";
                      }
                      else
                      {
                          cellColor = org.iesapp.framework.util.ColorUtils.getString(Cfg.colorSignaTard);
                          txt = "<b style=\"background-color: "+cellColor+"; color: Black;\">"+txt+"</b>";
                          //tip = "Minuts que ha arribat tard";
                      }
                //System.out.println(row +";" +(dies.get(i)-1)+":"+txt); 
                bean.setDj(txt, i+1);
            }
           listbean.add(bean);
           row +=1 ;
        }
 
        rc.reportMensualFaltes(listbean, map);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
       isListening = false;
       this.dispose();
    }//GEN-LAST:event_formWindowClosing

   private void ClearTable()
   {
      while(jTable1.getRowCount()>0) {
            modelTable1.removeRow(0);
        }
   }
    
    private void FillTable()
    {
        
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        
        int mes = jMonthChooser1.getMonth();
        int any = jYearChooser1.getYear();


        for(String abrev: GuardiesModule.abrev2prof.keySet())
        {

            Object[] profeMes = dadesAcumulades.getInfoMes(abrev, mes, any);
            modelTable1.insertRow(jTable1.getRowCount(), profeMes);

        }
        
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }

    @Override
   protected JRootPane createRootPane() {
    JRootPane rootPane2 = new JRootPane();
    KeyStroke stroke = KeyStroke.getKeyStroke("ESCAPE");
    Action actionListener = new AbstractAction() {
      public void actionPerformed(ActionEvent actionEvent) {
        setVisible(false);
      }
    } ;
    InputMap inputMap = rootPane2.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
    inputMap.put(stroke, "ESCAPE");
    rootPane2.getActionMap().put("ESCAPE", actionListener);

    return rootPane2;
  }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private com.toedter.calendar.JMonthChooser jMonthChooser1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private DefaultTableModel modelTable1;
    private com.toedter.calendar.JYearChooser jYearChooser1;
    // End of variables declaration//GEN-END:variables
    private GuardiesModule parent;
    private final String[] abrevs;
}
 
 
 class HighlightRenderer extends DefaultTableCellRenderer {
    private final Cfg cfg;

  /*
   * @see TableCellRenderer#getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)
   */
   public HighlightRenderer(Cfg cfg)
   {
       this.cfg = cfg;
   }


  @Override
  public Component getTableCellRendererComponent(JTable table, Object value,
                                                 boolean isSelected, boolean hasFocus,
                                                 int row, int column) {


  JLabel jlabel = new JLabel();

  String txt = (String) value;
  txt = (txt == null)? "" : txt;
  jlabel.setText(txt);
  
  Color cellColor = null;
  String tip = null;

  if(txt.trim().equals("F"))
  {
        cellColor = Cfg.colorFalta;
        tip = "Falta";
  }
  else if(txt.contains("-J"))
  {
        cellColor = Cfg.colorFaltaJustificada;
        tip = "Justificat";
  }
  else if(txt.trim().equals("Ok"))
  {
      cellColor =  Cfg.colorOk;

      tip = "Tot signat d'hora";
  }
  else if(txt.trim().contains("?") && txt.contains("Ok"))
  {
      cellColor =  Cfg.colorFaltenXSignar;
      tip = "Arriba d'hora però té Guardies sense signar.";
  }
  else if(txt.trim().contains("?") && txt.contains("Ok-J"))
  {
      cellColor =  Cfg.colorFaltaJustificada;
      tip = "Arriba d'hora però té Guardies sense signar.";
  }
  else if(txt.trim().equals("-") || txt.length() == 0)
  {
      cellColor = new Color(245,245,245);
  }
  else
  {
      cellColor = Cfg.colorSignaTard;
      tip = "Minuts que ha arribat tard";
  }


  if(isSelected) {
            cellColor = org.iesapp.framework.util.ColorUtils.fade(cellColor);
        }

  //jlabel.setHorizontalAlignment(CENTER);
  jlabel.setOpaque(true);
  jlabel.setBackground(cellColor);
  jlabel.setToolTipText(tip);

  return jlabel;
  }



}
 
 
 class RowHeaderRenderer extends JLabel implements ListCellRenderer {

  RowHeaderRenderer(JTable table) {
    JTableHeader header = table.getTableHeader();
    setOpaque(true);
    setBorder( javax.swing.BorderFactory.createLineBorder(Color.gray) );//UIManager.getBorder("TableHeader.cellBorder"));

    setHorizontalAlignment(LEFT);
    setForeground(header.getForeground());
    setBackground(header.getBackground());
    setFont(header.getFont());
  }

  public Component getListCellRendererComponent(JList list, Object value,
      int index, boolean isSelected, boolean cellHasFocus) {
    setText((value == null) ? "" : value.toString());
    return this;
  }
}
