//mysql> select abrev from professorat where abrev not in (select abrev from signatures where data='12/04/2011');

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FulldeGuardies.java
 *
 * Created on 08-abr-2011, 6:35:52
 */

package org.iesapp.modules.guardies.dialogs;

import java.awt.event.ActionEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import org.iesapp.clients.iesdigital.guardies.CellModel;
import org.iesapp.framework.data.User;
import org.iesapp.framework.table.CellTableState;
import org.iesapp.framework.table.MyCheckBoxRenderer;
import org.iesapp.framework.table.MyIconLabelRenderer;
import org.iesapp.framework.table.TextAreaRenderer;
import org.iesapp.framework.util.CoreCfg;
import org.iesapp.framework.util.IconUtils;
import org.iesapp.modules.guardies.GuardiesModule;
import org.iesapp.modules.guardies.table.CellRendererFaltes;
import org.iesapp.modules.guardies.table.CellRendererFaltes2;
import org.iesapp.modules.guardies.util.Cfg;
import org.iesapp.modules.guardies.util.ControlData;
import org.iesapp.util.StringUtils;
/**
 *
 * @author Josep
 */
public class FulldeGuardies extends javax.swing.JFrame {
    private HashMap<String, Integer> mapaColor;
    private ArrayList<Integer> listColor;
    private final Cfg cfg;



   
    /** Creates new form FulldeGuardies */
    public FulldeGuardies(GuardiesModule par, final Cfg cfg){
      this.cfg = cfg;
      this.setIconImage(new ImageIcon(getClass().getResource("/org/iesapp/modules/guardies/icons/guardiaIcon.gif")).getImage());

      parent = par;
      isListening = false;

      dl = "'";


      initComponents();

      jPanel4.setVisible(cfg.getCoreCfg().getUserInfo().getGrant()==User.ADMIN);
          
      
       jTable1.setIntercellSpacing( new java.awt.Dimension(2,2) );
       jTable1.setGridColor(java.awt.Color.gray);
       jTable1.setShowGrid(true);
        
       jTable2.setIntercellSpacing( new java.awt.Dimension(2,2) );
       jTable2.setGridColor(java.awt.Color.gray);
       jTable2.setShowGrid(true);
       jTable2.setCellSelectionEnabled(false);
       
       jTable4.setIntercellSpacing( new java.awt.Dimension(2,2) );
       jTable4.setGridColor(java.awt.Color.gray);
       jTable4.setShowGrid(true);

      jTable1.getModel().addTableModelListener( new TableModelListener()
              {
              public void tableChanged(TableModelEvent e)
               {

                    int mrow = e.getFirstRow();
                    int mcol = e.getColumn();
                    if(isListening && (mcol >= 6))
                    {
                        String prof = "";
                        if(mcol==6) {
                        prof =(String) jTable1.getValueAt(mrow, mcol);
                    }
                        //System.out.println(e);
                        //System.out.println("canvi a la columna" + mrow +" " + mcol);
                        //System.out.println("la cella val ara " +prof);
                        commitToDB(mrow);
                   }

                    if(mcol==7) {
                    creaAulesDisponibles(jComboBox1.getSelectedIndex()+1);
                } //refesca les aules disponibles
                    if(cfg.getCoreCfg().getUserInfo().getGrant()!=User.ADMIN) {
                       jPanel4.setVisible(false);
                   }
              }
      });

      if( !cfg.getCoreCfg().getMysql().isClosed() )
      {
      int nh = new ControlData(cfg).getIntHora(CoreCfg.coreDB_guardiaAntelacio);
      nh  = nh < 8 ? nh : 7;    //no hi ha guardies per la tarda
      jComboBox1.setSelectedIndex(nh-1);
      //this.fillTable(nh);
      }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex != 6)
                return false;   //Disallow the editing of any cell
                else
                return true;
            }
        }
        ;
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;
            }
        };
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;
            }
        }

        ;
        jPanel5 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();

        setTitle("Full de Guàrdies");
        setAlwaysOnTop(true);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowDeiconified(java.awt.event.WindowEvent evt) {
                formWindowDeiconified(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(212, 217, 223));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Selecciona l'hora de la guàrdia");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] {
            "1a Hora", "2a Hora", "3a Hora", "4a Hora", "5a Hora", "6a Hora", "7a Hora" }));
jComboBox1.setToolTipText("Selecciona l'hora de la guàrdia");
jComboBox1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
jComboBox1.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        jComboBox1ActionPerformed(evt);
    }
    });

    jLabel2.setText(" o utilitza l'hora actual");

    jButton1.setText("ARA");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButton1)
            .addContainerGap(414, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(jLabel1)
            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabel2)
            .addComponent(jButton1))
    );

    jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
    jLabel3.setForeground(new java.awt.Color(204, 0, 0));
    jLabel3.setText("FALTES:");

    jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel4.setForeground(new java.awt.Color(204, 0, 0));
    jLabel4.setText("X  HORA ( xx:yy - xx:yy)");

    modelTable1 = new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "Professor/a", "Dept.", "Grup", "Aula", "Feina", "Comentaris",
            "Qui fa la Guàrdia?", "On?"
        }
    );
    jTable1.setModel(modelTable1);
    jTable1.setRowHeight(cfg.alturaCella);
    jTable1.getColumnModel().getColumn(0).setPreferredWidth(200);
    jTable1.getColumnModel().getColumn(0).setPreferredWidth(200);
    jTable1.getColumnModel().getColumn(5).setPreferredWidth(200);
    jTable1.getColumnModel().getColumn(6).setPreferredWidth(200);

    jTable1.getTableHeader().setReorderingAllowed(false);
    jTable1.getColumnModel().getColumn(0).setCellRenderer(new CellRendererFaltes());
    jTable1.getColumnModel().getColumn(1).setCellRenderer(new CellRendererFaltes());
    jTable1.getColumnModel().getColumn(2).setCellRenderer(new CellRendererFaltes());
    jTable1.getColumnModel().getColumn(3).setCellRenderer(new CellRendererFaltes2());
    jTable1.getColumnModel().getColumn(4).setCellRenderer(new MyCheckBoxRenderer());
    jTable1.getColumnModel().getColumn(5).setCellRenderer(new TextAreaRenderer());
    jTable1.getColumnModel().getColumn(6).setCellRenderer(new CellRendererFaltes());
    jTable1.getColumnModel().getColumn(7).setCellRenderer(new CellRendererFaltes());
    jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jTable1MouseClicked(evt);
        }
    });
    jScrollPane1.setViewportView(jTable1);

    jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    jLabel5.setText("PROFESSORS DE GUARDIA I LLOC ASSIGNAT");

    modelTable2 = new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "Professor/a de guardia", "Lloc"
        }
    );
    jTable2.setModel(modelTable2);
    jTable2.setRowHeight(30);

    jTable2.getColumnModel().getColumn(0).setPreferredWidth(200);
    jTable2.setModel(modelTable2);
    jTable2.getTableHeader().setReorderingAllowed(false);

    Icon[] icons = new Icon[]{IconUtils.getBlankIcon()};

    jTable2.getColumnModel().getColumn(0).setCellRenderer(new CellRendererFaltes2());
    jTable2.getColumnModel().getColumn(1).setCellRenderer(new MyIconLabelRenderer(icons));
    jScrollPane2.setViewportView(jTable2);

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel5))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(36, Short.MAX_VALUE))
    );
    jPanel3Layout.setVerticalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel5)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
            .addContainerGap())
    );

    jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    jLabel6.setText("AULES BUIDES");

    modelTable4 = new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null },
            {null, null },
            {null, null },
            {null, null }
        },
        new String [] {
            "Aula", "Descripció"
        }
    );
    jTable4.setModel(modelTable4);
    jTable4.setToolTipText("Doble-click per seleccionar l'aula");
    jTable4.setRowHeight(30);
    jTable4.getColumnModel().getColumn(0).setPreferredWidth(50);
    jTable4.getTableHeader().setReorderingAllowed(false);
    jTable4.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jTable4MouseClicked(evt);
        }
    });
    jScrollPane4.setViewportView(jTable4);

    javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
    jPanel4.setLayout(jPanel4Layout);
    jPanel4Layout.setHorizontalGroup(
        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel4Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
                .addComponent(jLabel6))
            .addContainerGap())
    );
    jPanel4Layout.setVerticalGroup(
        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel4Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel6)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
    );

    jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/iesapp/modules/guardies/icons/exit.gif"))); // NOI18N
    jButton2.setText("Tanca");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton2ActionPerformed(evt);
        }
    });
    jPanel5.add(jButton2);

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                    .addComponent(jLabel3)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLabel4))
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 893, Short.MAX_VALUE))
            .addGap(10, 10, 10))
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 903, Short.MAX_VALUE)
            .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel3)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(12, 12, 12)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(2, 2, 2))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
       int sel = jComboBox1.getSelectedIndex();
       
       fillTable(sel+1);
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        doRefresh();
    }//GEN-LAST:event_formWindowGainedFocus

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        doRefresh();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowDeiconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeiconified
        //nothing to be done
    }//GEN-LAST:event_formWindowDeiconified

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int mcol = jTable1.getSelectedColumn();
        int mrow = jTable1.getSelectedRow();

        if(mcol==7 && evt.getClickCount()==2)
        {
            delIdReserves = (String) jTable1.getValueAt(mrow, 7);
            
            if(delIdReserves.length() != 0) {
                jTable1.setValueAt("", mrow, 7);
            }
            jPanel4.setVisible(true);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable4MouseClicked
        int row = jTable4.getSelectedRow();
        if(row>=0 && evt.getClickCount()==2)
        {
            String aula = (String) jTable4.getValueAt(row, 0);
            int row1 = jTable1.getSelectedRow();
            if(row1>=0) {
                jTable1.setValueAt(aula, row1, 7);
            }
        }
    }//GEN-LAST:event_jTable4MouseClicked

// Omple la taula de faltes per a l'hora h-essima

    private void fillTable(int h)
    {
        //15-10-2011: S'asegura que els comboBox no pugin donar problemes
        jTable1.editCellAt(0,0); 
        isListening = false;


         //Crea profes de guardia i aules buides
        creaProfesGuardia(h);
        creaAulesDisponibles(h);


        //delete table
        while(jTable1.getRowCount()>0)
        {
            modelTable1.removeRow(0);
        }

        int sel = jComboBox1.getSelectedIndex();
        Time[] horesClase = cfg.getCoreCfg().getIesClient().getDatesCollection().getHoresClase();
        String label  = (String) jComboBox1.getSelectedItem() + "  " + horesClase[sel];
        jLabel4.setText( label );
        
        String SQL1 = null;
        ResultSet rs1 = null;

      //////////////////////// llegir la taula de feina i comentaris
       HashMap<String, Object> hmapFeina = new HashMap<String, Object>();
       HashMap<String, String> hmapComment = new HashMap<String, String>();
       HashMap<String, String> hmapPGuarda = new HashMap<String, String>();
       HashMap<String, String> hmapOnGuarda = new HashMap<String, String>();

        SQL1 = "SELECT profe_falta, feina, comentaris, on_guarda FROM " + Cfg.prefix +
                "diari_guardies WHERE DATA="
                + dl + parent.ctrlDia + dl + " AND HORA=" + h + "";

      try
      {
         Statement st = cfg.getCoreCfg().getMysql().createStatement();
         rs1 = cfg.getCoreCfg().getMysql().getResultSet(SQL1,st);
        while(rs1.next())
        {
            String key = StringUtils.noNull( rs1.getString("profe_falta"));
            hmapFeina.put(key, rs1.getInt("feina"));
            hmapComment.put(key, StringUtils.noNull(rs1.getString("comentaris")));
            hmapOnGuarda.put(key, StringUtils.noNull(rs1.getString("on_guarda")));
        }
        rs1.close();
        st.close();
      }
      catch(java.sql.SQLException ex)
      {
          Logger.getLogger(FulldeGuardies.class.getName()).log(Level.SEVERE, null, ex);
      }

       ///CREA UN MAPA ENTRE ELS PROFESSORS QUE FALTEN I ELS QUE S'HAN ASSIGNAT LA GUARDIA
        SQL1 = "SELECT PROFE_FALTA, PROF.NOMBRE, PROFE_GUARDA FROM "+Cfg.prefix+"diari_guardies AS DG INNER JOIN "
              +Cfg.prefix+"professorat AS PROF ON PROF.ABREV=DG.profe_guarda"
              + " WHERE DATA="+ dl + parent.ctrlDia + dl + " AND HORA=" + h + "";

       
        try{
             Statement st = cfg.getCoreCfg().getMysql().createStatement();
             rs1 = cfg.getCoreCfg().getMysql().getResultSet(SQL1,st);
        while(rs1.next())
        {
            String key = rs1.getString("PROFE_FALTA");
            hmapPGuarda.put(key, rs1.getString("NOMBRE")+ " [" + rs1.getString("PROFE_GUARDA") + "]");
        }
        rs1.close();
        st.close();

        }
        catch(java.sql.SQLException ex)
        {
          Logger.getLogger(FulldeGuardies.class.getName()).log(Level.SEVERE, null, ex);
        }


        //en aquesta consulat necessitaria saber la zona de guardia associada a l'aula
//         SQL1 = "SELECT PROF.ABREV, NOMBRE, DEPART, ASIG, NIVEL, CURSO, GRUPO, AULA, H"+ h
//          + " FROM (" + Cfg.prefix +"professorat AS PROF INNER JOIN "+
//                       Cfg.prefix +"horaris AS HOR ON PROF.ABREV=HOR.PROF)"
//          + " INNER JOIN " + Cfg.prefix +"signatures AS SIG ON SIG.ABREV=PROF.ABREV"
//          + " WHERE DATA=" + dl + parent.ctrlDia + dl +" AND HORA="+ h +
//          " AND DIA="+ parent.intDiaSetmana +" AND H"+ h +"<>1 ORDER BY H" + h + " DESC, PROF.NOMBRE";


       SQL1 =" SELECT PROF.ABREV, NOMBRE, DEPART, ASIG, NIVEL, CURSO, GRUPO, HOR.AULA, "+
             " esp.zona_guardia, esp.descripcio, H"+h+" FROM "+
             "  (sig_professorat AS PROF "+
             " INNER JOIN "+
             "    sig_horaris AS HOR "+
             "    ON PROF.ABREV = HOR.PROF "+
             " ) "+
             " INNER JOIN "+
             "  sig_signatures AS SIG "+
             "  ON SIG.ABREV = PROF.ABREV "+
             " LEFT JOIN "+
             "  sig_espais AS esp "+
             "  ON esp.aula=HOR.AULA "+
             " WHERE DATA = '"+parent.ctrlDia+"' "+
             "  AND HORA ="+h+
             "  AND DIA ="+parent.intDiaSetmana+
             "  AND  H"+ h +"<>1 "+
             " ORDER BY H" + h + " DESC, PROF.NOMBRE";
 
    
      try{
       
        String abrev_old = null;
        String lletragrup = "";
        
         Statement st = cfg.getCoreCfg().getMysql().createStatement();
         rs1 = cfg.getCoreCfg().getMysql().getResultSet(SQL1,st);

            while(rs1.next()) {
                String abrev = StringUtils.noNull(rs1.getString("ABREV")).trim();
                String nom = StringUtils.noNull(rs1.getString("NOMBRE"));
                int code = rs1.getInt("H"+h);
                lletragrup = StringUtils.noNull(rs1.getString("GRUPO"));
                String camp = StringUtils.noNull(rs1.getString("ASIG"));
                String curs = StringUtils.noNull(rs1.getString("CURSO")) + " " +
                              StringUtils.noNull(rs1.getString("NIVEL"))+ "-" ;

                String descripcio = StringUtils.noNull(rs1.getString("descripcio"));
                String zona_guardia = StringUtils.noNull(rs1.getString("zona_guardia"));

                //un camp filtrat (no cal guardar-lo) no cal afergir-lo
                boolean isFiltrat = false;
                Iterator<String> itr = cfg.filtrats.iterator();
                while (itr.hasNext()) {
                  if(itr.next().equals(camp.trim()))
                  {
                   isFiltrat = true;
                   break;
                  }
                }

             int feina = 0;
             Object obj = hmapFeina.get(abrev);
             if(obj != null) {
                    feina = ((Number) obj).intValue();
                }

            String comment = "";
            obj = hmapComment.get(abrev);
            if(obj != null) {
                    comment = (String) obj;
                }

            String pguarda ="???";
            obj = hmapPGuarda.get(abrev);
            if(obj != null) {
                    pguarda = ((String) obj);
                }

            String onguarda ="";
            obj = hmapOnGuarda.get(abrev);
            if(obj != null) {
                    onguarda = ((String) obj);
                }

           if( !abrev.equals(abrev_old) && !isFiltrat)
           {
            // simplement hauria d'afegir la lletra del grup d'ara
            curs += lletragrup;
            lletragrup = "";
            CellModel aCell = new CellModel(0, nom, abrev, code);


            //Colorifica l'aula
            CellModel aulaCell = new CellModel();
            String aula = "   " + StringUtils.noNull(rs1.getString("AULA"));
            aulaCell.setText( aula );
            aulaCell.setComentari(descripcio);
            aulaCell.setStatus(-1);
            if(mapaColor.containsKey(zona_guardia)) {
                        aulaCell.setFeina(mapaColor.get(zona_guardia));
                    }

            modelTable1.addRow(
              new Object[]{
                  aCell, StringUtils.noNull(rs1.getString("DEPART")) +" [1]",
                  curs+" [1]", aulaCell, feina >0, comment, pguarda, onguarda
                  }
              );

              abrev_old = abrev;
           }
          }
           rs1.close();
           st.close();

     }
     catch(java.sql.SQLException ex)
     {
          Logger.getLogger(FulldeGuardies.class.getName()).log(Level.SEVERE, null, ex);
     }



     isListening = true;
}


////////////////////////////////////////////////////////////////////////////////
// Professors de guardia
////////////////////////////////////////////////////////////////////////////////

    private void creaProfesGuardia(int h)
    {
      HashMap<String, String> hmapOnDuty_nomc = new HashMap<String, String>();
      HashMap<String, String> hmapOnDuty_lloc = new HashMap<String, String>();
      HashMap<String, Object> hmapOnDuty_estat = new HashMap<String, Object>();
      HashMap<String, String> hmapDescripcio = new HashMap<String, String>();

      listColor = new ArrayList<Integer>(); //crea una llista on mostra l'index del color de cada fila

     //NOVA CONSULTA PER TAL DE DEDUIR L'ESTAT DE LA GUARDIA EN QUESTIO

      String SQL1 = "SELECT profes.ABREV, NOMBRE, gua.lloc, zone.descripcio, H"+h +" FROM ( " + Cfg.prefix + "guardies AS gua " +
             " INNER JOIN sig_professorat AS profes ON profes.ABREV=gua.ABREV ) "+
             " INNER JOIN sig_signatures AS SIG ON SIG.abrev=profes.abrev " +
             " LEFT JOIN sig_guardies_zones AS zone ON zone.lloc = gua.lloc "+
             " WHERE DIA="+ parent.intDiaSetmana + " AND HORA="+h +" AND DATA=" + parent.dl + parent.ctrlDia + parent.dl+
             " ORDER BY LLOC";

      try
      {
         Statement st = cfg.getCoreCfg().getMysql().createStatement();
         ResultSet rs1 = cfg.getCoreCfg().getMysql().getResultSet(SQL1,st);
        
        int i = 0;

            while(rs1.next()) {
               String abrev = StringUtils.noNull(rs1.getString("ABREV"));
               String nom = StringUtils.noNull(rs1.getString("NOMBRE"));
               String lloc = StringUtils.noNull(rs1.getString("LLOC"));
               String descrip = StringUtils.noNull(rs1.getString("descripcio"));
               int estat = rs1.getInt("H"+h);

               hmapOnDuty_nomc.put(abrev, nom);
               Object antic = hmapOnDuty_lloc.get(abrev);
               Object antic2 = hmapDescripcio.get(abrev);
               if(antic==null)
               {
                    hmapOnDuty_lloc.put(abrev, lloc);
                    hmapDescripcio.put(abrev, descrip);
               }
               else
               {
                   String nou = (String) antic + " / " + lloc;
                   String nou2 = (String) antic2 + " / " + descrip;
                   hmapOnDuty_lloc.put(abrev, nou);
                   hmapDescripcio.put(abrev, nou2);
               }

               hmapOnDuty_estat.put(abrev, estat);    //aixo no s'actualitza
               i +=1;
            }
             rs1.close();
             st.close();

      }
      catch(java.sql.SQLException ex)
      {
          Logger.getLogger(FulldeGuardies.class.getName()).log(Level.SEVERE, null, ex);
      }


     //Prepara la informacio dels professors de guardia per esser mostrada en el
     //Quadre de text i en el combo box (ambdós han d'estar colorificats)

     //borra la taula2
     while(jTable2.getRowCount()>0)
     {
           modelTable2.removeRow(0);
     }

     String [] profes = null;
     ArrayList<String> vp = new ArrayList<String>();
     vp.add("???");

     int i = 0;
     int ipos = 0;
     boolean canvia=true;

     //ordena el mapa pels seus valors
     //System.out.print( "abans:"+hmapOnDuty_lloc.toString() );

     hmapOnDuty_lloc = (HashMap<String, String>) StringUtils.sortByComparator(hmapOnDuty_lloc);
     
     //System.out.print( "despres:"+hmapOnDuty_lloc.toString() );
     //problema me desapareixen

     for(String ky: hmapOnDuty_lloc.keySet())
     {
        String nom = hmapOnDuty_nomc.get(ky);
        String lloc = hmapOnDuty_lloc.get(ky).trim();
        int estat = ((Number) hmapOnDuty_estat.get(ky)).intValue();


        //compara amb l'anterior si existeix
        if(i>=1)
        {
            CellTableState cts = (CellTableState) jTable2.getValueAt(ipos-1, 1);
            String cm = cts.getText();
            canvia = true;
            
            if(lloc.equals(cm.trim()))
            {
                canvia = false;
            }
            
        }

        if(canvia) {
                i += 1;
            }
        ipos += 1;

        CellModel aCell = new CellModel(1, nom, "", estat);
        aCell.setFeina(i);
//        aCell.comment()
        listColor.add(i);

        CellTableState cts = new CellTableState(lloc, -1, 0);
        cts.setTooltip(hmapDescripcio.get(ky));

        
        modelTable2.addRow(
                new Object[]{aCell, cts} // + " [0]"
        );

        if(estat==1) //si ha signat afegeix al combobox de seleccio de qui guarda??
        {
               vp.add(  nom + " [" + ky + "]" );
        }

           
     }

     profes = vp.toArray(new String[]{});


     TableColumnModel cm = jTable1.getColumnModel();

     cm.getColumn(6).setCellEditor(new DefaultCellEditor(
             new JComboBox(new DefaultComboBoxModel( profes ))
             ));



      mapaColor = creaMapaLlocGuardiaColor();

    }


////////////////////////////////////////////////////////////////////////////////
//Crea la taula d'hores disponibles
////////////////////////////////////////////////////////////////////////////////
    private void creaAulesDisponibles(int h)
    {


     //actualitza la taula d'aules disponibles
     String SQL1 = "SELECT * FROM sig_espais WHERE  utilizable_guardia=1 AND aula"
             + " NOT IN (SELECT aula FROM sig_horaris WHERE dia="
             + parent.intDiaSetmana+" AND hora="+ h + ") AND aula not IN "
             + "(SELECT id_recurs FROM sig_reserves WHERE data="+
              parent.dl+parent.ctrlDia+parent.dl+ " AND hora="+ h +") order by aula";
 
     //borra la taula2
     while(jTable4.getRowCount()>0)
     {
           modelTable4.removeRow(0);
     }

         try {
            Statement st = cfg.getCoreCfg().getMysql().createStatement();
            ResultSet rs1 = cfg.getCoreCfg().getMysql().getResultSet(SQL1,st);
            while (rs1 != null && rs1.next()) {
                    modelTable4.insertRow(jTable4.getRowCount(),
                            new Object[]{rs1.getString("aula"),
                            rs1.getString("descripcio")});
         }
           if(rs1!=null) {
                 rs1.close();
                 st.close();
             }
         } catch (SQLException ex) {
                Logger.getLogger(FulldeGuardies.class.getName()).log(Level.SEVERE, null, ex);
         }
    }

////////////////////////////////////////////////////////////////////////////////
// commit canvis en el professor que guarda a la DB
////////////////////////////////////////////////////////////////////////////////
    private void commitToDB(int row){
       
       String SQL1 = null;
       ResultSet rs1 = null;

       String profe = (String) jTable1.getValueAt(row,6);
       String onguarda = (String) jTable1.getValueAt(row,7);
  
       String abrev = "";
       if(profe.contains("["))
       {
            abrev = StringUtils.AfterLast(profe,"[");
            abrev = StringUtils.BeforeLast(abrev,"]");
       }
       else if( profe.startsWith("?") )
       {
           abrev = "";
       }

       CellModel profe_falta = (CellModel) jTable1.getValueAt(row, 0);
       String abrevfalta = profe_falta.codig;

       int h = jComboBox1.getSelectedIndex()+1;
       SQL1 = "UPDATE "+ Cfg.prefix + "diari_guardies SET PROFE_GUARDA='" +
            abrev + "', ON_GUARDA='"+onguarda+"' WHERE PROFE_FALTA='"+ abrevfalta + "' "
            + " AND DATA=" + dl + parent.ctrlDia + dl +" AND HORA="+ h +
          " AND DIA_SETMANA="+ parent.intDiaSetmana;

       

       int nup = cfg.getCoreCfg().getMysql().executeUpdate(SQL1);
       //System.out.println("UPDATED::"+nup+";"+SQL1);

        String grup = (String) jTable1.getValueAt(row, 2);
        String aula = ((CellModel) jTable1.getValueAt(row, 3)).getText();
        String grupInfo = StringUtils.BeforeLast((String) jTable1.getValueAt(row, 1),"[") + ", "
                    + StringUtils.BeforeLast((String) jTable1.getValueAt(row, 2),"[") +
                    "[" + aula.trim() + "]";
        if (nup==0) //&& !abrev.equals("")
        {
           
            
            // no update has been since it means that it cannot be found in database
               SQL1 =  "INSERT INTO "+ Cfg.prefix + "diari_guardies ( DATA, DIA_SETMANA, "
                     + "HORA, PROFE_FALTA, PROFE_GUARDA, ON_GUARDA, GRUP, FEINA, COMENTARIS) VALUES( "+
                       dl + parent.ctrlDia + dl + ", '" +
                       parent.intDiaSetmana + "', '" +
                       h + "', '" +
                       abrevfalta + "' , '" +
                       abrev + "', '"+
                       onguarda + "', '"+
                       grupInfo + "', '" +
                       "0', ''  )" ;

                     nup = cfg.getCoreCfg().getMysql().executeUpdate(SQL1);
                    //System.out.println("inserted::"+nup+";"+SQL1);
        }

       //Deixa constància a la base de dades de reserves que ha estat utilitzada per l'usuari GUARDIES
       // tipus = 2 fa referencia a aules
         if(delIdReserves.length() != 0)
         {
               String SQL2 = "DELETE FROM "+ Cfg.prefix + "reserves WHERE abrev='GUARD' AND "+
                 " tipus='2' AND  data='"+parent.ctrlDia+"' AND hora='"+h+"' AND "+
                 " id_recurs='"+delIdReserves+"'";
               nup = cfg.getCoreCfg().getMysql().executeUpdate(SQL2);
         }
         else if(onguarda.length() != 0)
         {
          SQL1 =  "INSERT INTO "+ Cfg.prefix + "reserves (abrev, tipus, id_recurs, data, hora, motiu) "+
                  " VALUES('GUARD', '2', '"+onguarda+"','"+parent.ctrlDia+"', '"+h+"', 'Guàrdia: "+profe+"; Grup:"+grup+"')";

          nup = cfg.getCoreCfg().getMysql().executeUpdate(SQL1);

        }
    }


    protected JRootPane createRootPane() {
    JRootPane rootPane = new JRootPane();
    KeyStroke stroke = KeyStroke.getKeyStroke("ESCAPE");
    Action actionListener = new AbstractAction() {
      public void actionPerformed(ActionEvent actionEvent) {
        setVisible(false);
      }
    } ;
    InputMap inputMap = rootPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
    inputMap.put(stroke, "ESCAPE");
    rootPane.getActionMap().put("ESCAPE", actionListener);

    return rootPane;
  }

   public void doRefresh()
   {             
         if(cfg.getCoreCfg().getMysql().isClosed()) {
            return;
        }
         int nh = new ControlData(cfg).getIntHora(CoreCfg.coreDB_guardiaAntelacio);
         nh  = nh < 8 ? nh : 7;
       
         jComboBox1.setSelectedIndex(nh-1);
         this.fillTable(nh);
      
   }

   // treu un missatge d'alerta si hi ha problemes amb les guardies
   public String getInfo()
   {
       //primer s'assegura que es fa un update de les taules
       doRefresh();

       String info = "";
       String llocs ="";
       for(int i = 0; i< jTable2.getRowCount(); i++)
       {
           CellModel acell = (CellModel) jTable2.getValueAt(i, 0);
           CellTableState cts = (CellTableState) jTable2.getValueAt(i, 1);
           String lloc = cts.getText();
           if(acell.status != 1) {
                llocs += "  " + lloc + ";  \n";
            }
       }

       int ngrups = 0;
       for(int i = 0; i< jTable1.getRowCount(); i++)
       {
           String guarda = (String) jTable1.getValueAt(i, 6);
           if(guarda.equals("???")) {
                ngrups += 1 ;
            }
       }

       if( llocs.length() != 0 )
       {
           info += "Darrer missatge a les "+new ControlData(cfg).getHora() + ".  \n\n";
           info += "Falten professors de guardia a: \n" + llocs + ".  ";
       }
       if( ngrups != 0)
       {
           info  += "\nHi ha "+ngrups+" grups sense professor.";
       }
       
       return info;
   }

   
   ///// Crea un Mapa de colorificació; cada possible lloc de guardia te el seu color
   ///// Nota que pot ser que dos llocs de guardia tenguin el mateix color si es el cas
   ///// que un mateix professor s'encarregui de dos llocs a l'hora

    private HashMap<String, Integer> creaMapaLlocGuardiaColor() {
        HashMap<String, Integer> mapa = new HashMap<String, Integer>();
//
//        String SQL1 = "Select distinct lloc from "+Cfg.prefix+"guardies_zones";
//        ResultSet rs1 = cfg.getCoreCfg().getMysql().getResultSet(SQL1);
//
//        int i = 1;
//
//        try {
//            while (rs1 != null && rs1.next()) {
//                mapa.put(rs1.getString("lloc"), i);
//                i += 1;
//            }
//            if(rs1!=null) rs1.close();
//        } catch (SQLException ex) {
//            Logger.getLogger(FulldeGuardies.class.getName()).log(Level.SEVERE, null, ex);
//        }

        for(int j=0; j<jTable2.getRowCount(); j++)
        {
            CellTableState cts = (CellTableState) jTable2.getValueAt(j, 1);
            String cm = cts.getText();
            List aux = StringUtils.parseStringToArray(cm, "/", 1);

            for(int i=0; i<aux.size(); i++)
            {
                String zona = ((String) aux.get(i)).trim();
                mapa.put(zona, listColor.get(j));
            }
        }

       // System.out.println(mapa.toString());
        return mapa;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    public javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable4;
    // End of variables declaration//GEN-END:variables

    private DefaultTableModel modelTable1;
    private DefaultTableModel modelTable2;
    private DefaultTableModel modelTable4;
    private String dl;
    private GuardiesModule parent;
    private boolean isListening;
    private String delIdReserves="";

}
